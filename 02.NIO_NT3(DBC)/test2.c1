#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <dirent.h>
#include <pthread.h>
 

 void str_replace(char *source, const char *oldStr, const char *newStr) 
{
    int len = strlen(oldStr);
    
    while (1) {
        source = strstr(source, oldStr); // 查找第一次出现的位置
        
        if (!source) break; // 如果没有找到则退出循环
        
        memmove(source + len, source, strlen(source)); // 将后面的内容向前移动
        memcpy(source, newStr, len); // 复制新的字符串到指定位置
    }
}
// 定义最大线程数量
#define MAX_THREADS 10
 
// 定义线程结构体
typedef struct {
    char* filename; // 文件名
} ThreadData;
 
void* threadFunc(void* arg) {
    ThreadData* data = (ThreadData*)arg;
    
    // 调用 str_replace() 函数进行字符串替换操作
    char newFilename[256];
    strcpy(newFilename, data->filename);
    str_replace("old", "new", newFilename);
    
    printf("%s -> %s\n", data->filename, newFilename);
    
    free(data->filename);
    free(data);
    
    pthread_exit(NULL);
}
 
int main() {
    DIR *dir;
    struct dirent *entry;
    int i;
    
    // 初始化线程池
    pthread_t threads[MAX_THREADS];
    for (i=0; i<MAX_THREADS; ++i) {
        pthread_create(&threads[i], NULL, &threadFunc, NULL);
    }
    
    // 打开当前目录
    if ((dir = opendir(".")) != NULL) 
    {
        while ((entry = readdir(dir)) != NULL) {
            // 只处理文件而不是目录或其他类型的项
            if (!isDirectory(entry->d_name)) {
                // 分配内存保存文件名
                char* filename = malloc((strlen(entry->d_name)+1)*sizeof(char));
                
                // 复制文件名到新变量
                strncpy(filename, entry->d_name, sizeof(filename)-1);
                filename[sizeof(filename)-1]='\0';
                
                // 获取空闲线程索引
                int index=-1;
                for (i=0; i<MAX_THREADS; ++i) {
                    if (pthread_tryjoin_np(threads[i], NULL) == EBUSY) {
                        index = i;
                        break;
                    }
                }
                
                // 如果没有空闲线程则等待
                if (index==-1) {
                    sleep(1);
                    continue;
                }
                
                // 创建线程数据结构体并传入文件名
                ThreadData* data = malloc(sizeof(ThreadData));
                data->filename = filename;
                
                // 向线程发送消息
                pthread_create(&threads[index], NULL, &threadFunc, (void*)data);
            }
        }
        
        closedir(dir);
    } 
    else 
    {
        perror("无法打开目录");
        return EXIT_FAILURE;
    }